"""
This service starts Open vSwitch (if already installed) on nodes 
running the service.
"""
import os
import re

from core.service import CoreService
from core.service import ServiceManager

class OvsService(CoreService):
    ''' This is a sample user-defined service. 
    '''
    # a unique name is required, without spaces
    _name = "OvsService"
    # you can create your own group here
    _group = "SDN"
    # list of other services this service depends on
    _depends = ()
    # per-node directories
    _dirs = ("/etc/openvswitch", "/var/run/openvswitch", "/var/log/openvswitch")
    # generated files (without a full path this file goes in the node's dir,
    #  e.g. /tmp/pycore.12345/n1.conf/)
    _configs = ('OvsService.sh', )
    # this controls the starting order vs other enabled services
    _startindex = 50
    # list of startup commands, also may be generated during startup
    _startup = ('sh OvsService.sh',)
    # list of shutdown commands
    _shutdown = ('killall ovs-vswitchd','killall ovsdb-server')

    @classmethod
    def generateconfig(cls, node, filename, services):
        ''' Return a string that will be written to filename, or sent to the
            GUI for user customization. 
        '''
        # Check whether the node is running zebra
        has_zebra = 0
        for s in services:
            if s._name == "zebra":
                has_zebra = 1
       
        # Check whether the node is running an SDN controller
        has_sdn_ctrlr = 0
        for s in services:
            if s._name == "ryuService":
                has_sdn_ctrlr = 1

        cfg = "#!/bin/sh\n"
        cfg += "# auto-generated by OvsService (OvsService.py)\n"
        cfg += "/etc/init.d/openvswitch-switch start < /dev/null\n"
        cfg += "ovs-vsctl add-br ovsbr0\n"
        cfg += "ifconfig ovsbr0 up\n"
        
        for ifc in node.netifs():
            if hasattr(ifc, 'control') and ifc.control == True:
                continue
            ifnumstr = re.findall(r"\d+", ifc.name)
            ifnum = ifnumstr[0]
            
            # create virtual interfaces
            cfg += "ip link add rtr%s type veth peer name sw%s\n" % (ifnum, ifnum)
            cfg += "ifconfig rtr%s up\n" % ifnum
            cfg += "ifconfig sw%s up\n" % ifnum

            # remove ip address of eths because quagga/zebra will assign same IPs to rtr interfaces
            # or assign them manually to rtr interfaces if zebra is not running
            for ifcaddr in ifc.addrlist:
                if ifcaddr.find(".") >= 0:
                    cfg += "ip addr del %s dev %s\n" % (ifcaddr, ifc.name)
                    if has_zebra == 0:
                        cfg += "ip addr add %s dev rtr%s\n" % (ifcaddr, ifnum)
                elif ifcaddr.find(":") >= 0:
                    cfg += "ip -6 addr del %s dev %s\n" % (ifcaddr, ifc.name)
                    if has_zebra == 0:
                        cfg += "ip -6 addr add %s dev rtr%s\n" % (ifcaddr, ifnum)
                else:
                    raise Value, "invalid address: %s", x

            # add interfaces to bridge
            cfg += "ovs-vsctl add-port ovsbr0 eth%s\n" % ifnum
            cfg += "ovs-vsctl add-port ovsbr0 sw%s\n" % ifnum

        #if has_sdn_ctrlr == 1:  #TODO- even if the controller is not local, it finds it
            # Add rule for default controller if there is one local
            cfg += "ovs-vsctl set-controller ovsbr0 tcp:127.0.0.1:6633\n"
        #else:            
            # Delete flows otherwise
            #cfg += "ovs-ofctl del-flows ovsbr0\n"  

        # Setup default flows
        portnum = 1
        for ifc in node.netifs():
            if hasattr(ifc, 'control') and ifc.control == True:
                continue
            cfg += "ovs-ofctl add-flow ovsbr0 priority=1000,in_port=%d,action=output:%d\n" % (portnum, portnum+1)
            cfg += "ovs-ofctl add-flow ovsbr0 priority=1000,in_port=%d,action=output:%d\n" % (portnum+1, portnum)
            portnum += 2
            
        return cfg

    @staticmethod
    def subnetentry(x):
        # Maybe move default flow rules to here?
        return


# this line is required to add the above class to the list of available services
ServiceManager.add(OvsService)

